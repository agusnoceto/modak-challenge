// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	model "github.com/agusnoceto/modak-challenge/internal/model"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// GetByEmailSince provides a mock function with given fields: key, email, since
func (_m *Repository) GetByEmailSince(key model.MessageKey, email string, since time.Time) ([]model.Message, error) {
	ret := _m.Called(key, email, since)

	var r0 []model.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(model.MessageKey, string, time.Time) ([]model.Message, error)); ok {
		return rf(key, email, since)
	}
	if rf, ok := ret.Get(0).(func(model.MessageKey, string, time.Time) []model.Message); ok {
		r0 = rf(key, email, since)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(model.MessageKey, string, time.Time) error); ok {
		r1 = rf(key, email, since)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: key, email, msg
func (_m *Repository) Insert(key model.MessageKey, email string, msg string) error {
	ret := _m.Called(key, email, msg)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.MessageKey, string, string) error); ok {
		r0 = rf(key, email, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
